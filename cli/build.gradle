import com.github.blindpirate.gogradle.GogradleGlobal
import com.github.blindpirate.gogradle.GogradleModule
import com.github.blindpirate.gogradle.GolangPlugin
import com.github.blindpirate.gogradle.GolangPluginSetting
import com.github.blindpirate.gogradle.build.SubprocessReader
import com.github.blindpirate.gogradle.crossplatform.GoBinaryManager
import com.google.inject.Guice

import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.util.concurrent.CountDownLatch

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.blindpirate:gogradle:${managedVersions['gradle.plugin.com.github.blindpirate:gogradle']}"
    }
}

apply plugin: 'base'

ext {
    def defaultClientRepoUrl = 'https://github.com/line/centraldogma-go.git'
    def defaultClientTag = '4c736b80420b1476e8003a2236f8ff680f171074'

    goVersion = '1.12.7'

    clientRepoUrl = project.findProperty('goClientRepoUrl')?: defaultClientRepoUrl
    clientTag = project.findProperty('goClientTag')?: defaultClientTag

    goPath = project.file("${project.buildDir}/gopath")
    clientRepoDir = project.file("${project.ext.goPath}/src/go.linecorp.com/centraldogma")
    clientBinDir = project.file("${project.ext.goPath}/bin")
}

tasks.clean.doFirst {
    // Go module files have no write permission.
    // We need to grant write permission before attempting to delete them.
    def modulesDir = project.file("${goPath}/pkg/mod")
    if (modulesDir.exists()) {
        ant.chmod(dir: modulesDir, perm: 'u+w', type: 'both', includes: '**', maxparallel: '500')
    }
}

// Configure gogradle only as much as we need.
def injector = Guice.createInjector(new GogradleModule(project))
project.getExtensions().add(GolangPlugin.GOGRADLE_INJECTOR, injector)
def golangSettings = injector.getInstance(GolangPluginSetting.class)
def goBinaryManager = injector.getInstance(GoBinaryManager.class)

task goBinary(group: 'Build', description: "Downloads Go ${project.ext.goVersion}.") {
    doLast {
        // Download the Go distribution using gogradle.
        GogradleGlobal.INSTANCE.setCurrentProject(project)
        try {
            golangSettings.goVersion = project.ext.goVersion
            goBinaryManager.getBinaryPath()
            logger.lifecycle("Using Go ${goBinaryManager.goVersion}")
        } finally {
            GogradleGlobal.INSTANCE.setCurrentProject(null)
        }
    }
}

task clientSource(group: 'Build', 
                  description: 'Clones and checks out the Central Dogma command line interface.') {
    doLast {
        if (!project.ext.clientRepoDir.exists()) {
            logger.lifecycle("Cloning ${project.ext.clientRepoUrl}")
            project.ext.executeGit('clone', project.ext.clientRepoUrl, project.ext.clientRepoDir)
        } else {
            logger.lifecycle("Cleaning ${project.ext.clientRepoDir}")
            executeWithWorkDir(project.ext.clientRepoDir, project.ext.gitPath, 'clean', '-fdx')
        }

        logger.lifecycle("Checking out ${project.ext.clientTag}")
        executeWithWorkDir(project.ext.clientRepoDir, project.ext.gitPath, 'checkout', project.ext.clientTag)
    }
}

task clientBinary(group: 'Build', 
                  description: 'Builds the Central Dogma command line interface for all platforms.') {
    dependsOn tasks.goBinary
    dependsOn tasks.clientSource

    doLast {
        ['linux-amd64', 'darwin-amd64', 'windows-amd64'].each { platform ->
            def isWindows = platform.startsWith('windows-')
            ProcessBuilder pb = new ProcessBuilder(
                    "${goBinaryManager.binaryPath}", 'build',
                    '-ldflags', "-X main.version=${version} -X main.shortHash=${rootProject.ext.repoStatus.shortCommitHash}")
            pb.directory(project.file("${project.ext.clientRepoDir}/internal/app/dogma"))

            def env = pb.environment()
            env['GOOS'] = platform.split('-')[0]
            env['GOARCH'] = platform.split('-')[1]
            env['GOPATH'] = project.ext.goPath.toString()
            env['GOROOT'] = goBinaryManager.goroot.toString()
            env['GOBIN'] = goBinaryManager.binaryPath.parent.toString()
            env['GO111MODULE'] = 'on'
            env['CGO_ENABLED'] = '0'

            def process = pb.start();
            def latch = new CountDownLatch(2)

            new SubprocessReader({ process.inputStream }, { logger.lifecycle(it) }, latch).start();
            new SubprocessReader({ process.errorStream }, { logger.error(it) }, latch).start();
            latch.await();

            def exitValue = process.waitFor()
            if (exitValue != 0) {
                throw new GradleException("'go build' has been terminated with a non-zero exit value: ${exitValue}")
            }

            if (isWindows) {
                def executable = project.file("${project.ext.clientRepoDir}/internal/app/dogma/dogma.exe")
                def target = project.file("${project.ext.clientBinDir}/dogma.${platform}.exe")
                ant.chmod(file: "${executable}", perm: 'a-x')
                target.parentFile.mkdirs()
                Files.move(executable.toPath(), target.toPath(), StandardCopyOption.REPLACE_EXISTING)
            } else {
                def executable = project.file("${project.ext.clientRepoDir}/internal/app/dogma/dogma")
                def target = project.file("${project.ext.clientBinDir}/dogma.${platform}")
                target.parentFile.mkdirs()
                Files.move(executable.toPath(), target.toPath(), StandardCopyOption.REPLACE_EXISTING)
            }
        }
    }
}

tasks.assemble.dependsOn tasks.clientBinary

private static String executeWithWorkDir(File workDir, ...command) {
    assert workDir != null && workDir.isDirectory()

    def cmd = []
    command.each { cmd += it.toString() }

    def proc = cmd.execute((List) null, workDir)
    proc.waitFor()
    if (proc.exitValue() != 0) {
        throw new IOException(
                "'${command}' has been terminated with a non-zero exit value: ${proc.exitValue()}:" +
                        "${System.lineSeparator()}${proc.err.text}")
    }

    return proc.in.text.trim()
}
