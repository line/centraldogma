buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.2'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.8'
    }
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}

ext {
    // Remove 'java' from the client artifact IDs.
    artifactIdOverrides = [
        ':client:java': "${rootProject.name}-client",
        ':client:java-armeria': "${rootProject.name}-client-armeria",
        ':client:java-armeria-legacy': "${rootProject.name}-client-armeria-legacy",
        ':client:java-spring-boot-autoconfigure': "${rootProject.name}-client-spring-boot-autoconfigure",
        ':client:java-spring-boot-starter': "${rootProject.name}-client-spring-boot-starter",
        ':client:java-spring-boot1-autoconfigure': "${rootProject.name}-client-spring-boot1-autoconfigure",
        ':client:java-spring-boot1-starter': "${rootProject.name}-client-spring-boot1-starter"
    ]
}

apply from: "${rootDir}/gradle/scripts/build-flags.gradle"

configure(projectsWithFlags('java')) {

    // Apply common plugins.
    apply plugin: 'me.champeau.gradle.jmh'

    // Common properties and functions.
    ext {
        thriftVersion = '0.9'
    }

    dependencies {
        // All projects currently require ':common' (except itself)
        if (project.name != 'common') {
            compile project(':common')
        }

        // Testing utilities
        testCompile project(':testing-internal')

        // completable-futures
        compile 'com.spotify:completable-futures'

        // cron-utils
        compile 'com.cronutils:cron-utils'

        // Guava
        compile 'com.google.guava:guava'

        // Jackson
        ['annotations', 'core', 'databind'].each {
            compile "com.fasterxml.jackson.core:jackson-$it"
        }

        // javax.inject
        compile 'javax.inject:javax.inject'

        // JSR305
        compile 'com.google.code.findbugs:jsr305'

        // Jetty ALPN support
        compileOnly 'org.eclipse.jetty.alpn:alpn-api'

        // Logging
        compile 'org.slf4j:slf4j-api'
        testCompile 'org.slf4j:jul-to-slf4j'
        testRuntime 'ch.qos.logback:logback-classic'
        ['jcl-over-slf4j', 'log4j-over-slf4j'].each {
            testRuntime "org.slf4j:$it"
        }

        // Test-time dependencies
        testCompile 'junit:junit'
        testCompile 'net.javacrumbs.json-unit:json-unit-fluent'
        testCompile 'org.awaitility:awaitility'
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.assertj:assertj-core'
        testCompile 'org.mockito:mockito-core'
    }

    // Target Java 8.
    tasks.withType(JavaCompile) {
        if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            options.compilerArgs += ['--release', '8']
        }
    }

    // Configure JMH.
    jmh {
        forceGC = true
        includeTests = false
        duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
        jmhVersion = managedVersions['org.openjdk.jmh:jmh-core']

        if (rootProject.hasProperty('jmh.fork')) {
            fork = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.fork')))
        } else {
            fork = 1
        }
        if (rootProject.hasProperty('jmh.iterations')) {
            iterations = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.iterations')))
        }
        if (rootProject.hasProperty('jmh.warmupIterations')) {
            warmupIterations = Integer.parseInt(String.valueOf(rootProject.findProperty('jmh.warmupIterations')))
        } else {
            warmupIterations = iterations
        }
        if (rootProject.hasProperty('jmh.profilers')) {
            profilers = String.valueOf(rootProject.findProperty('jmh.profilers')).split(',')
        }
        if (rootProject.hasProperty('jmh.verbose')) {
            verbosity = 'EXTRA'
        }
    }
    configurations.jmh.extendsFrom configurations.testRuntime

    // Add common JVM options such as max memory and leak detection.
    tasks.withType(JavaForkOptions) {
        // Use larger heap when test coverage is enabled.
        maxHeapSize = hasFlags('coverage') ? '384m' : '128m'

        // Enable leak detection when '-Pleak' option is specified.
        if (project.hasProperty('leak')) {
            systemProperties 'io.netty.leakDetectionLevel': 'paranoid'
        }
    }
}

// Configure the Javadoc tasks of all projects.
allprojects {
    tasks.withType(Javadoc) {
        options {
            // Exclude the machine-generated or internal-only classes
            exclude '**/internal/**'
            exclude '**/thrift/**'
        }
    }
}

// Require to use JDK 10 when releasing.
tasks.release.doFirst {
    if (JavaVersion.current() != JavaVersion.VERSION_11) {
        throw new IllegalStateException("You must release using JDK 11.");
    }
}
