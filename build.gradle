plugins {
    alias libs.plugins.nexus.publish
    alias libs.plugins.osdetector apply false
}

allprojects {
    repositories {
        mavenCentral()
    }
}

ext {
    // Remove 'java' from the client artifact IDs.
    artifactIdOverrides = [
        ':client:java': "${rootProject.name}-client",
        ':client:java-armeria': "${rootProject.name}-client-armeria",
        ':client:java-armeria-legacy': "${rootProject.name}-client-armeria-legacy",
        ':client:java-spring-boot2-autoconfigure': "${rootProject.name}-client-spring-boot2-autoconfigure",
        ':client:java-spring-boot2-starter': "${rootProject.name}-client-spring-boot2-starter",
        ':client:java-spring-boot3-autoconfigure': "${rootProject.name}-client-spring-boot3-autoconfigure",
        ':client:java-spring-boot3-starter': "${rootProject.name}-client-spring-boot3-starter",
        // Set the correct artifactId of 'testing-common'.
        ':testing:testing-common': "${rootProject.name}-testing-common"
    ]
}

apply from: "${rootDir}/gradle/scripts/build-flags.gradle"

configure(projectsWithFlags('java')) {

    // Common properties and functions.
    ext {
        thriftVersion = '0.9'
    }

    dependencies {
        // All projects currently require ':common' (except itself)
        if (project.name != 'common') {
            api project(':common')
        }

        // Testing utilities
        testImplementation project(':testing-internal')

        // completable-futures
        implementation libs.futures.completable

        // cron-utils
        implementation libs.cron.utils

        // Guava
        implementation libs.guava

        // Jackson
        implementation libs.jackson.annotations
        implementation libs.jackson.core
        implementation libs.jackson.databind

        // javax.inject
        api libs.javax.inject

        // JSR305
        implementation libs.findbugs

        // Jetty ALPN support
        compileOnly libs.jetty.alpn.api

        // Logging
        if (project.name.startsWith("java-spring-boot3")) {
            implementation libs.slf4j2.api
            testImplementation libs.slf4j2.jul.to.slf4j
            testImplementation libs.slf4j2.jcl.over.slf4j
            testImplementation libs.slf4j2.log4j.over.slf4j
            testRuntimeOnly libs.logback14
            configurations.configureEach {
                resolutionStrategy {
                    force libs.slf4j2.api.get()
                    force libs.slf4j2.jul.to.slf4j.get()
                    force libs.slf4j2.jcl.over.slf4j.get()
                    force libs.slf4j2.log4j.over.slf4j.get()
                    force libs.logback14.get()
                }
            }
        } else {
            implementation libs.slf4j1.api
            testImplementation libs.slf4j1.jul.to.slf4j
            testImplementation libs.slf4j1.jcl.over.slf4j
            testImplementation libs.slf4j1.log4j.over.slf4j
            testRuntimeOnly libs.logback12
        }

        // Test-time dependencies
        testImplementation libs.json.unit.fluent
        testImplementation libs.awaitility
        testImplementation libs.hamcrest.library
        testImplementation libs.assertj
        testImplementation libs.mockito.core
        testImplementation libs.mockito.junit.jupiter
        testImplementation libs.junit5.jupiter.api
        testImplementation libs.junit5.jupiter.params
        testRuntimeOnly libs.junit5.jupiter.engine
        testRuntimeOnly libs.junit5.platform.launcher
        testRuntimeOnly libs.junit5.vintage.engine
    }

    // Target Java 8 except for spring-boot3
    if (!project.name.startsWith("java-spring-boot3")) {
        tasks.withType(JavaCompile) {
            if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
                options.release = 8
            }
        }
    }

    // Add common JVM options such as max memory and leak detection.
    tasks.withType(JavaForkOptions) {
        // Use larger heap when test coverage is enabled.
        maxHeapSize = hasFlags('coverage') ? '512m' : '384m'

        // Enable leak detection when '-Pleak' option is specified.
        if (project.hasProperty('leak')) {
            systemProperties 'io.netty.leakDetectionLevel': 'paranoid'
        }
    }

    tasks.sourcesJar.duplicatesStrategy = DuplicatesStrategy.INCLUDE
    tasks.processResources.duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure the Javadoc tasks of all projects.
allprojects {
    tasks.withType(Javadoc) {
        options {
            // Exclude the machine-generated or internal-only classes
            exclude '**/internal/**'
            exclude '**/thrift/**'
        }
    }
}

// Require to use JDK 21 when releasing.
tasks.release.doFirst {
    if (JavaVersion.current() != JavaVersion.VERSION_21) {
        throw new IllegalStateException("You must release using JDK 17.")
    }
}
