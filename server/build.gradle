import static org.gradle.internal.os.OperatingSystem.WINDOWS
import static org.gradle.internal.os.OperatingSystem.current

plugins {
    alias libs.plugins.node.gradle
}

node {
    version = '16.14.0'
    npmVersion = '8.5.2'
    download = true
    npmInstallCommand = "ci"

    // Change the cache location under Gradle user home directory so that it's cached by CI.
    if (System.getenv('CI') != null) {
        workDir = file("${gradle.gradleUserHomeDir}/caches/nodejs/${project.name}")
        npmWorkDir = file("${gradle.gradleUserHomeDir}/caches/npm/${project.name}")
    }
}

dependencies {
    implementation project(':common-legacy')

    // Armeria
    api libs.armeria
    api libs.armeria.thrift09
    testImplementation libs.armeria.junit5

    // JSch
    implementation libs.jsch

    // Caffeine
    implementation libs.caffeine

    // Curator & ZooKeeper
    implementation libs.curator.recipes
    implementation libs.zookeeper
    testImplementation libs.curator.test

    // DiffUtils
    implementation libs.diffutils

    // jCommander
    optionalImplementation libs.jcommander

    // Hacky way to use different jGit versions depending on the test Java version.
    // We will use jgit6 after we drop the support for Java 8 client.
    if (project.ext.testJavaVersion >= 11) {
        implementation libs.jgit6
    } else {
        implementation libs.jgit
    }

    // Micrometer
    implementation libs.micrometer.core
    implementation libs.micrometer.prometheus

    // Quartz
    implementation libs.quartz

    // Snappy
    implementation libs.snappy

    // Mockito for mocking a Project
    jmh libs.mockito.core
    // Logging
    optionalImplementation libs.logback
    optionalImplementation libs.slf4j.jul.to.slf4j
}

// allows illegal access by ExecutorServiceMetrics of Micrometer
if (project.ext.testJavaVersion >= 16) {
    tasks.withType(Test) {
        jvmArgs '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED'
    }
}

def clientRelocations = [
        'ace-builds/src-min-noconflict/',
        'angular/angular.min.js',
        'angular-cache-buster/angular-cache-buster.js',
        'angular-cookies/angular-cookies.min.js',
        'angular-dynamic-locale/dist/tmhDynamicLocale.min.js',
        'angular-ui-ace/src/ui-ace.js',
        'angular-i18n',
        'angular-local-storage/dist/angular-local-storage.min.js',
        'angular-resource/angular-resource.min.js',
        'angular-sanitize/angular-sanitize.min.js',
        'angular-translate/dist/angular-translate.min.js',
        'angular-translate-loader-partial/angular-translate-loader-partial.min.js',
        'angular-translate-storage-cookie/angular-translate-storage-cookie.min.js',
        'angular-ui-ace/src/ui-ace.js',
        'angular-ui-bootstrap/dist/',
        'angular-ui-notification/dist/',
        'angular-ui-router/release/angular-ui-router.min.js',
        'bootstrap/dist/',
        'bootswatch/cerulean/bootstrap.min.css',
        'diff/dist/diff.min.js',
        'fast-json-patch/dist/json-patch-duplex.min.js',
        'jquery/dist/jquery.min.js',
        'json3/lib/json3.min.js',
        'moment/min/moment.min.js'
]

task copyClientDependencies {
    dependsOn tasks.npmInstall

    doLast {
        clientRelocations.each { location ->
            def paths = location.split('/')
            def folder = paths[0]
            copy {
                from "${project.projectDir}/node_modules/$location"
                into "${project.projectDir}/src/main/resources/webapp/vendor/$folder"
            }
        }
    }
}

task cleanClientDependencies(type: Delete) {
    delete "${project.projectDir}/src/main/resources/webapp/vendor"
}

task copyWebApp(type: Copy) {
    dependsOn ':server-auth:webapp:buildWebApp'

    def dst = "${project.ext.genSrcDir}/main/resources/auth-webapp";

    from project(':server-auth:webapp').file('build')
    into dst

    doFirst {
        delete(dst)
    }

    // gradle holds a lock even after the buildWebapp task is completed
    if (current() == WINDOWS) {
        exclude("**/tmp/.cache/expanded/expanded.lock")
    }
}
tasks.sourcesJar.dependsOn(tasks.copyWebApp)
tasks.sourcesJar.dependsOn(tasks.versionProperties)
tasks.clean.dependsOn(tasks.cleanClientDependencies)
tasks.processResources.dependsOn(tasks.copyClientDependencies, tasks.copyWebApp)
