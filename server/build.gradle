import org.gradle.internal.os.OperatingSystem

dependencies {
    implementation project(':common-legacy')

    // Armeria
    api libs.armeria
    api libs.armeria.prometheus1
    api libs.armeria.thrift09
    testImplementation libs.armeria.junit5

    implementation libs.bouncycastle.bcprov

    // Caffeine
    implementation libs.caffeine

    if (OperatingSystem.current().isWindows()) {
        implementation(variantOf(libs.conscrypt) { classifier('windows-x86_64') })
    } else if (OperatingSystem.current().isMacOsX()) {
        implementation(variantOf(libs.conscrypt) { classifier('osx-x86_64') })
    } else {
        implementation(variantOf(libs.conscrypt) { classifier('linux-x86_64') })
    }

    // Curator & ZooKeeper
    implementation libs.curator.recipes
    implementation libs.zookeeper
    testImplementation libs.curator.test

    // DiffUtils
    implementation libs.diffutils

    // jCommander. optionalImplementation must be also added to the :dist dependencies.
    optionalImplementation libs.jcommander

    implementation libs.jgit6

    // Micrometer
    implementation libs.micrometer.core
    implementation libs.micrometer.prometheus

    implementation libs.rocksdbjni

    // Quartz
    implementation libs.quartz

    // Snappy
    implementation libs.snappy

    implementation libs.zstd

    // Logging
    optionalImplementation libs.logback15
    // For Caffiene. See https://github.com/line/centraldogma/pull/499
    optionalImplementation libs.slf4j2.jul.to.slf4j

    testImplementation libs.jackson.module.scala
}

// allows illegal access by ExecutorServiceMetrics of Micrometer
if (project.ext.testJavaVersion >= 16) {
    tasks.withType(Test) {
        jvmArgs '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED'
    }
}

if (!rootProject.hasProperty('noWeb')) {
    sourceSets {
        main {
            output.dir project(':webapp').file('build/javaweb'), builtBy: ':webapp:copyWeb'
        }
    }
}

tasks.sourcesJar.dependsOn(tasks.versionProperties)
