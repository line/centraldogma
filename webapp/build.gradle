plugins {
    id 'base'
    alias(libs.plugins.node.gradle)
}

node {
    version = '18.11.0'
    npmVersion = '9.1.1'
    download = true
    npmInstallCommand = "ci"

    // Change the cache location under Gradle user home directory so that it's cached by CI.
    if (System.getenv('CI') != null) {
        workDir = file("${gradle.gradleUserHomeDir}/caches/nodejs/${project.name}")
        npmWorkDir = file("${gradle.gradleUserHomeDir}/caches/npm/${project.name}")
    }
}

dependencies {
    // Dependencies to run test servers for testing the web application
    testImplementation(project(":server"))
    testImplementation(project(":server-auth:shiro"))
    testImplementation libs.shiro.core
}

task buildWeb(type: NpmTask) {
    dependsOn tasks.npmInstall
    args = ['run', 'build']
    inputs.dir('src')
    inputs.dir('pages')
    inputs.file('package.json')
    inputs.file('package-lock.json')
    inputs.file('next.config.js')

    outputs.dir('build/web')
}

task copyWeb(type: Copy) {
    dependsOn buildWeb

    from 'build/web'
    into 'build/javaweb/com/linecorp/centraldogma/webapp'
}

task simpleTestServer(type: JavaExec) {
    group = "Execution"
    description = "Run the simple Central Dogma server"
    classpath = sourceSets.test.runtimeClasspath
    main = "com.linecorp.centraldogma.webapp.SimpleCentralDogmaTestServer"
}

task simpleTestShiroServer(type: JavaExec) {
    group = "Execution"
    description = "Run the Central Dogma server with Apache Shiro"
    classpath = sourceSets.test.runtimeClasspath
    main = "com.linecorp.centraldogma.webapp.ShiroCentralDogmaTestServer"
}
