buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath libs.guava
    }
}

plugins {
    alias libs.plugins.download
}

import com.google.common.base.CaseFormat

ext {
    distDir = "${project.buildDir}/dist"
    relativeDistDir = distDir.substring("${rootProject.projectDir}/".length())
    cliDownloadDir = "${gradle.gradleUserHomeDir}/caches/centraldogma-go/cli"
}

dependencies {
    implementation project(':server')
    implementation project(':server-auth:saml')
    implementation project(':server-auth:shiro')
    implementation project(':server-mirror-git')
    implementation project(':xds')
    // Add the optionalImplementation in the server module to copy the JAR into the distribution directory.
    runtimeOnly libs.jcommander

    // Logging
    runtimeOnly libs.logback15
    runtimeOnly libs.slf4j2.jcl.over.slf4j
    runtimeOnly libs.slf4j2.jul.to.slf4j
    runtimeOnly libs.slf4j2.log4j.over.slf4j
}

// Do not generate a JAR for this project.
tasks.jar.enabled = false

task copyLicenses(group: 'Build',
                  description: "Copies license information into ${project.ext.relativeDistDir}/licenses",
                  type: Copy) {

    from "${rootProject.projectDir}"
    into "${project.ext.distDir}"
    include '/NOTICE.txt'
    include '/LICENSE.txt'
    include '/README.md'
    include "/licenses/**"
}

task copyLib(group: 'Build',
             description: "Copies JARs into ${project.ext.relativeDistDir}/lib",
             dependsOn: project(':server').tasks.jar,
             type: Copy) {

    from configurations.runtimeClasspath
    File libDir = new File("${project.ext.distDir}/lib")
    into libDir

    doLast {
        // Create an empty directory for keeping external JARs such as authentication module.
        project.mkdir("${libDir}/ext")
    }
}

def cliVersion = "0.1.1"

task downloadClientBinaries(group: 'Build',
        description: "Downloads client binaries into ${project.ext.cliDownloadDir}") {

    outputs.dir("${project.ext.cliDownloadDir}/$cliVersion")

    doLast {
        ["linux_amd64", "linux_arm64", "darwin_amd64", "darwin_arm64", "windows_amd64"].each { platform ->
            def baseFileName = "dogma_${cliVersion}_${platform}"
            def fileExtension
            def extractor

            if (platform.startsWith("windows")) {
                fileExtension = "zip"
                extractor = { path -> zipTree(path) }
            } else {
                fileExtension = "tar.gz"
                extractor = { path -> tarTree(path) }
            }

            def archiveFile = "${baseFileName}.${fileExtension}"

            download.run {
                src "https://github.com/line/centraldogma-go/releases/download/$cliVersion/$archiveFile"
                dest "${project.ext.cliDownloadDir}/$cliVersion/$archiveFile"
                overwrite false
            }

            def archivePath = "${project.ext.cliDownloadDir}/$cliVersion/$archiveFile"
            def extractDir = "${project.ext.cliDownloadDir}/$cliVersion/extracted_${platform}"

            project.mkdir(extractDir)
            copy {
                from extractor(archivePath)
                into extractDir
            }
        }
    }
}

task copyClientBinaries(group: 'Build',
        description: "Copies client binaries into ${project.ext.relativeDistDir}/bin/native") {
    dependsOn tasks.downloadClientBinaries

    doLast {
        def nativeDir = "${project.ext.distDir}/bin/native"
        project.mkdir(nativeDir)

        ["linux_amd64", "linux_arm64", "darwin_amd64", "darwin_arm64", "windows_amd64"].each { platform ->
            def extractDir = "${project.ext.cliDownloadDir}/$cliVersion/extracted_${platform}"
            def sourceFile
            def targetFileName

            if (platform.startsWith("windows")) {
                sourceFile = "${extractDir}/dogma.exe"
                targetFileName = "dogma.${platform}.exe"
            } else {
                sourceFile = "${extractDir}/dogma"
                targetFileName = "dogma.${platform}"
            }

            if (!file(sourceFile).exists()) {
                throw new GradleException("Source binary not found: $sourceFile")
            }

            copy {
                from sourceFile
                into nativeDir
                rename { targetFileName }
                fileMode 0755
            }
        }
    }
}

task distDirWithoutClientBinaries(group: 'Build',
        description: "Builds a distribution directory without client binaries (${project.ext.relativeDistDir})",
        dependsOn: [tasks.copyLicenses, tasks.copyLib])

// Create the tasks that copy each directory excluding client binaries under src/ into dist/
['bin', 'conf'].each { dirName ->
    def taskName = "copy${CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, dirName)}WithoutClientBinaries"
    tasks.distDirWithoutClientBinaries.dependsOn(tasks.create(taskName, Copy) {
        group = 'Build'
        description = "Copies src/$dirName into ${project.ext.relativeDistDir}/$dirName"
        from "${project.projectDir}/src/$dirName"
        into "${project.ext.distDir}/$dirName"
        exclude '**/dogma*'
    })
}

task distDir(group: 'Build',
             description: "Builds a distribution directory (${project.ext.relativeDistDir})",
             dependsOn: [tasks.copyLicenses, tasks.copyLib, tasks.copyClientBinaries])

// Create the tasks that copy each directory under src/ into dist/
['bin', 'conf'].each { dirName ->
    def taskName = "copy${CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, dirName)}"
    tasks.distDir.dependsOn(tasks.create(taskName, Copy) {
        group = 'Build'
        description = "Copies src/$dirName into ${project.ext.relativeDistDir}/$dirName"
        from "${project.projectDir}/src/$dirName"
        into "${project.ext.distDir}/$dirName"
    })
}

task tarball(group: 'Build',
             description: "Builds a tarball from the distribution directory (${project.ext.relativeDistDir})",
             dependsOn: tasks.distDir,
             type: Tar) {

    archiveBaseName = rootProject.name
    destinationDirectory = project.file("${project.buildDir}")
    compression = Compression.GZIP
    includeEmptyDirs = true

    def copyAlpnAgentTask = tasks.findByName("copyAlpnAgent")
    if (copyAlpnAgentTask) {
        dependsOn(copyAlpnAgentTask)
    }

    from "${project.ext.distDir}"
    into archiveBaseName.get() + '-' + project.version
}

tasks.assemble.dependsOn(tasks.tarball)

// Tasks for building docker image
task docker(group: 'Build',
            description: "Builds multiplatform docker image from the distribution directory" +
                    " (${project.ext.relativeDistDir})",
            dependsOn: tasks.distDir,
            type: Exec) {

    workingDir = file('.')
    executable 'docker'

    def imageName = 'ghcr.io/line/centraldogma'
    def imageVersion = project.hasProperty('version') ? project.getProperty('version') : project.version
    def platforms = ['linux/amd64', 'linux/arm64']

    def buildArgs = [
        'buildx', 'build',
        '--platform', platforms.join(','),
    ]

    if (imageVersion != 'test') {
       buildArgs.add('--push')
    }

    buildArgs.add("--tag")
    buildArgs.add("${imageName}:${imageVersion}")
    if (!(project.version =~ /-SNAPSHOT$/)) {
        buildArgs.add("--tag")
        buildArgs.add("${imageName}:latest")
    }
    buildArgs.add('.')

    args = buildArgs
}

// Tasks for running Central Dogma conveniently.
task startup(group: 'Execution',
             description: "Starts up Central Dogma at ${project.ext.relativeDistDir}",
             dependsOn: tasks.distDir,
             type: Exec) {

    commandLine "${project.ext.distDir}/bin/startup"
}

task shutdown(group: 'Execution',
              description: "Shuts down Central Dogma at ${project.ext.relativeDistDir}",
              type: Exec) {

    commandLine "${project.ext.distDir}/bin/shutdown"
}

tasks.startup.mustRunAfter(tasks.shutdown)

task restart(group: 'Execution',
             description: "Restarts Central Dogma at ${project.ext.relativeDistDir}",
             dependsOn: [tasks.shutdown, tasks.startup])
