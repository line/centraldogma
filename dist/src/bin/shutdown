#!/bin/bash -e

# shellcheck source=common.sh
source "$(dirname "$0")/common.sh"
cd "$APP_HOME"

if [[ -f "$APP_PID_FILE" ]]; then
  PID="$(cat "$APP_PID_FILE")"
  if [[ "$PID" =~ (^[0-9]+$) ]]; then
    kill -0 "$PID" >/dev/null 2>&1
    if [[ $? -gt 0 ]]; then
      eecho "PID file exists, but its process ($PID) does not exist; removing $APP_PID_FILE"
      rm -f "$APP_PID_FILE" > /dev/null 2>&1
      exit 100
    fi
  else
    eecho "$APP_PID_FILE does not contain a PID."
    exit 100
  fi
else
  eecho "PID file does not exist; $APP_NAME not running?"
  exit 100
fi

# Shut the application down
set +e
eecho "Shutting down $APP_NAME ($(cat "$APP_PID_FILE")) .."

kill -TERM "$PID"

# Wait until the PID file is removed by the application.
WAITING=1
COUNT=0
eecho -n "Waiting for PID file deletion up to $APP_WAIT_TIME second(s) .."
while true; do
  if [[ ! -f "$APP_PID_FILE" ]]; then
    eecho ' done'
    break
  fi

  ((COUNT++))
  sleep 1
  eecho -n '.'

  if [[ $APP_WAIT_TIME -ne 0 ]] && [[ $COUNT -ge $APP_WAIT_TIME ]]; then
    eecho ' timed out'
    WAITING=0
    break
  fi
done

if [[ "$WAITING" -eq 1 ]]; then
  # Wait until the process is actually gone.
  eecho -n "Waiting for process $PID to terminate up to $APP_WAIT_TIME second(s) .."
  while true; do
    if kill -0 "$PID" >/dev/null 2>&1; then
      # Process still exists.
      ((COUNT++))
      sleep 1
      eecho -n '.'

      if [[ $APP_WAIT_TIME -ne 0 ]] && [[ $COUNT -ge $APP_WAIT_TIME ]]; then
        eecho ' timed out'
        WAITING=0
        break
      fi
    else
      eecho ' done'
      eecho "Shut down $APP_NAME successfully."
      exit 0
    fi
  done
fi

eecho "Failed to shut down $APP_NAME"
exit 255
