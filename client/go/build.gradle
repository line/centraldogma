plugins {
    id 'com.github.blindpirate.gogradle' version '0.7.0'
}

golang {
    packagePath = 'github.com/line/centraldogma/client/go'

    goVersion = '1.9'
}

dependencies {
    golang {
        build('github.com/urfave/cli@v1.19.1') {
            transitive = false
        }
        // no tags or releases
        build 'github.com/bgentry/go-netrc#9fd32a8b3d3d3f9d43c341bfe098430e07609480'
        // Golang sub-repositories with looser compatibility requirements
        build(name: 'golang.org/x/crypto', url: 'https://github.com/golang/crypto', commit: '7d9177d70076375b9a59c8fde23d52d9c4a7ecd5') {
            transitive = false
        }
        build name: 'golang.org/x/sys', url: 'https://github.com/golang/sys', commit: '314a259e304ff91bd6985da2a7149bbf91237993'
    }
}

ext {
    goPath = System.env.GOPATH
    if (goPath == null) {
        goPath = "${project.projectDir}/.gogradle/project_gopath"
    }
    // Needs replaceAll() to make gogradle work on Windows.
    binDir = "${goPath}/bin".replaceAll('\\\\', '/')
}

// Gogradle puts several comman code check task into a check task. We need to explicitly specify this line
// to invoke the tasks. By default, it is out-of-the-box and depends on vet/fmt and cover.
build.dependsOn check

build {
    targetPlatform = ['linux-amd64', 'darwin-amd64', 'windows-amd64']

    go "build -o ${project.ext.binDir}" +
            '/dogma.${GOOS}-${GOARCH}${GOEXE} github.com/line/centraldogma/client/go/cmd/dogma'
    doLast {
        ant.chmod(file: "$project.ext.binDir" + '/dogma.windows-amd64.exe', perm: '644')
    }
}
