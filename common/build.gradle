buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "net.sf.proguard:proguard-gradle:${managedVersions['net.sf.proguard:proguard-gradle']}"
    }
}

dependencies {
    // DiffUtils
    compile 'com.googlecode.java-diff-utils:diffutils'

    // Guava
    compile 'com.google.guava:guava'

    // Jackson
    [ 'core', 'annotations', 'databind' ].each {
        compile "com.fasterxml.jackson.core:jackson-$it"
    }

    // JSON-path
    compile 'com.jayway.jsonpath:json-path'

    // Thrift
    compile 'org.apache.thrift:libthrift'

    // TestNG (for JSON patch tests)
    testCompile 'org.testng:testng'
}

// Run the test cases based on reactive-streams-tck
task testNg(type: Test,
        group: 'Verification',
        description: 'Runs the TestNG unit tests.') {
    useTestNG()
    testClassesDirs = tasks.test.testClassesDirs
    classpath = tasks.test.classpath
    scanForTestClasses = false
}
tasks.test.finalizedBy tasks.testNg
tasks.check.dependsOn tasks.testNg

if (hasFlags('coverage')) {
    jacocoTestReport {
        // Include the coverage data from the TestNG test cases.
        executionData file("${project.buildDir}/jacoco/testNg.exec")
    }
}

tasks.trimShadedJar.configure {
    keep "class !com.linecorp.centraldogma.internal.shaded.**,com.linecorp.centraldogma.** { *; }"
    keep "class com.linecorp.centraldogma.internal.shaded.caffeine.** { *; }" // To make the unsafe field access work.
    // Prevent ProGuard from removing all enum values from Option because otherwise it becomes a non-enum class.
    keep "class com.linecorp.centraldogma.internal.shaded.jsonpath.Option { *; }"
}

tasks.compileThrift.doLast {
    // Replace 'fromRevision' with 'from' (and 'toRevision' with 'to') because Thrift compiler
    // does not let us use the parameter name 'from' complaining it's a reserved keyword.
    // We can't rename it because renaming a field or a parameter is a backward-incompatible
    // change in TText protocol.
    project.fileTree("${project.projectDir}/gen-src/main/java") {
        include '**/*.java'
    }.each { sourceFile ->
        def encoding = 'UTF-8'
        def oldContent = sourceFile.getText(encoding)
        def content = oldContent
                .replaceAll('fromRevision', 'from')
                .replaceAll('toRevision', 'to')
        if (content != oldContent) {
            sourceFile.write(content, encoding)
        }
    }
}
